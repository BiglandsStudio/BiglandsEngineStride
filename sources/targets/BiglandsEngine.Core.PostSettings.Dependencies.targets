<!-- Build file post-included by all BiglandsEngine projects -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>.ssdeps; $(AllowedOutputExtensionsInPackageBuildOutputFolder)</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);_BiglandsEngineRegisterDependenciesOutputs</TargetsForTfmSpecificBuildOutput>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_BiglandsEngineRegisterPackageFiles</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>
  <!-- 
  *****************************************************************************************************************************
  Dependencies reading (from .ssdeps)
  *****************************************************************************************************************************
  -->

  <!-- List dependency files from .ssdeps -->
  <Target Name="_BiglandsEngineListDepsFiles" DependsOnTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <_BiglandsEngineDepsFile Include="@(ReferencePath->'%(RootDir)%(Directory)%(Filename).ssdeps')" Condition="'%(ReferencePath.CopyLocal)' != 'false' And Exists('%(RootDir)%(Directory)%(Filename).ssdeps')"/>
      <_BiglandsEngineDepsFile Include="@(ReferenceDependencyPaths->'%(RootDir)%(Directory)%(Filename).ssdeps')" Condition="'%(ReferenceDependencyPaths.CopyLocal)' != 'false' And Exists('%(RootDir)%(Directory)%(Filename).ssdeps')"/>
      <None Include="@(_BiglandsEngineDepsFile)" CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>
  </Target>

  <!-- Note: this target Outputs are not real, used so that it gets expanded for each file
             also, if _BiglandsEngineDepsFile is empty the target is still called so check for it -->
  <Target Name="_BiglandsEngineBuildDependencies" DependsOnTargets="_BiglandsEngineListDepsFiles" Outputs="%(_BiglandsEngineDepsFile.Identity)">
    <!-- Read dependencies from file -->
    <ReadLinesFromFile File="%(_BiglandsEngineDepsFile.Identity)" Condition="'%(_BiglandsEngineDepsFile.Identity)' != ''">
      <Output TaskParameter="Lines" ItemName="_BiglandsEngineDependencyLocal"/>
    </ReadLinesFromFile>
    <PropertyGroup>
      <_BiglandsEngineSourceDir>%(_BiglandsEngineDepsFile.RootDir)%(_BiglandsEngineDepsFile.Directory)</_BiglandsEngineSourceDir>
    </PropertyGroup>
    <ItemGroup>
      <_BiglandsEngineDependencyLocal>
        <!-- Note: Using regex match rather than regex split or string split to avoid MSBuild MissingMethodException -->
        <Type>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(1).ToString())</Type>
        <SourcePath>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(2).ToString())</SourcePath>
        <Link>$([System.Text.RegularExpressions.Regex]::Match('%(Identity)', `(.*);(.*);(.*)`).get_Groups().get_Item(3).ToString())</Link>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </_BiglandsEngineDependencyLocal>
      <_BiglandsEngineDependencyContent Include="@(_BiglandsEngineDependencyLocal->'$(_BiglandsEngineSourceDir)%(SourcePath)')" Condition="'%(_BiglandsEngineDependencyLocal.Type)' == 'Content'"/>
      <_BiglandsEngineDependencyNativeLib Include="@(_BiglandsEngineDependencyLocal->'$(_BiglandsEngineSourceDir)%(SourcePath)')" Condition="'%(_BiglandsEngineDependencyLocal.Type)' == 'NativeLib'"/>
    </ItemGroup>

    <!-- Message -->
    <Message Importance="Normal" Text="Detected dependency from %(_BiglandsEngineDepsFile.FileName)" Condition="'%(_BiglandsEngineDepsFile.Identity)' != ''"/>
    <Message Importance="Normal" Text="  %(_BiglandsEngineDependencyLocal.Type): %(_BiglandsEngineDependencyLocal.Identity) => %(_BiglandsEngineDependencyLocal.Link)"/>

    <!-- Cleanup so that _BiglandsEngineDependencyLocal is local -->
    <ItemGroup>
      <_BiglandsEngineDependencyLocal Remove="@(_BiglandsEngineDependencyLocal)"/>
    </ItemGroup>
  </Target>

  <Target Name="_BiglandsEngineCopyContent" DependsOnTargets="_BiglandsEngineBuildDependencies" AfterTargets="ResolveAssemblyReferences" Condition="'$(BiglandsEngineDependenciesCopy)' != 'false'">
    <ItemGroup>
      <Content Include="@(_BiglandsEngineDependencyContent)" Pack="False"/>
    </ItemGroup>
  </Target>

  <!-- 
  *****************************************************************************************************************************
  Native libraries setup (from .ssdeps)
  *****************************************************************************************************************************
  -->
  <Target Name="_BiglandsEngineSetupNativeLibraries" DependsOnTargets="_BiglandsEngineBuildDependencies" AfterTargets="ResolveAssemblyReferences" Condition="'$(BiglandsEngineDependenciesCopy)' != 'false'">
    <!-- Windows, UWP, Linux & macOS -->
    <ItemGroup Condition=" '$(TargetFramework)' == '$(BiglandsEngineFramework)' Or '$(TargetFramework)' == '$(BiglandsEngineFrameworkWindows)' Or '$(TargetFramework)' == '$(BiglandsEngineFrameworkUWP)' ">
      <None Include="@(_BiglandsEngineDependencyNativeLib)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </None>
    </ItemGroup>

    <!-- Android -->
    <ItemGroup Condition=" '$(TargetFramework)' == '$(BiglandsEngineFrameworkAndroid)' ">
      <AndroidNativeLibrary Include="@(_BiglandsEngineDependencyNativeLib)"/>
    </ItemGroup>

    <!--iOS -->
    <ItemGroup Condition=" '$(TargetFramework)' == '$(BiglandsEngineFrameworkiOS)' ">
      <!-- strip any "lib" prefix and populate the LibraryName value -->
      <_BiglandsEngineDependencyNativeLib>
        <LibraryName>$([System.Text.RegularExpressions.Regex]::Match('%(Filename)', `(lib)*(.+)`).get_Groups().get_Item(2).ToString())</LibraryName>
      </_BiglandsEngineDependencyNativeLib>

      <None Include="@(_BiglandsEngineDependencyNativeLib)">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </None>
    </ItemGroup>
  
    <PropertyGroup Condition=" '$(TargetFramework)' == '$(BiglandsEngineFrameworkiOS)' ">
      <MtouchExtraArgsLibs>$(BiglandsEngineMTouchExtras) -L"%24{ProjectDir}" @(_BiglandsEngineDependencyNativeLib->'-l%(LibraryName) "%24{ProjectDir}/%(Filename)%(Extension)"',' ')</MtouchExtraArgsLibs>
      <MtouchExtraArgs>$(MtouchExtraArgs) --compiler=clang -cxx -gcc_flags '-lstdc++ $(MtouchExtraArgsLibs)'</MtouchExtraArgs>
    </PropertyGroup>
  </Target>

  <!-- 
  *****************************************************************************************************************************
  Dependencies generation (to .ssdeps)
  *****************************************************************************************************************************
  -->
  <Target Name="_BiglandsEngineGenerateDependenciesCore">
    <!-- Set TargetPath on BiglandsEngineContent and BiglandsEngineNativeLib -->
    <AssignTargetPath RootFolder="$(OutputPath)" Files="@(BiglandsEngineContent)">
      <Output TaskParameter="AssignedFiles" ItemName="_BiglandsEngineContentAssigned"/>
    </AssignTargetPath>
    <AssignTargetPath RootFolder="$(OutputPath)" Files="@(BiglandsEngineNativeLib)">
      <Output TaskParameter="AssignedFiles" ItemName="_BiglandsEngineNativeLibAssigned"/>
    </AssignTargetPath>

    <!-- Combine into _BiglandsEngineDependencyToCopy (and add RelativePath and Type) -->
    <ItemGroup>
      <_BiglandsEngineDependencyToCopy Include="@(_BiglandsEngineContentAssigned)">
        <RelativePath Condition="'%(_BiglandsEngineContentAssigned.RelativePath)' == ''">%(TargetPath)</RelativePath>
        <Type>Content</Type>
        <Destination>$(OutDir)%(TargetPath)</Destination>
      </_BiglandsEngineDependencyToCopy>

      <_BiglandsEngineDependencyToCopy Include="@(_BiglandsEngineNativeLibAssigned)">
        <RelativePath Condition="'%(_BiglandsEngineNativeLibAssigned.RelativePath)' == ''">%(TargetPath)</RelativePath>
        <Type>NativeLib</Type>
        <Destination>$(OutDir)%(TargetPath)</Destination>
      </_BiglandsEngineDependencyToCopy>

      <_BiglandsEngineDependencyToCopy Remove="@(_BiglandsEngineNativeLibAssigned)" Condition=" '$(BiglandsEnginePackageBuild)' == 'true' And '%(_BiglandsEngineNativeLibAssigned.Extension)' == '.pdb' "/>
    </ItemGroup>

    <!-- Copy files -->
    <Copy
      SourceFiles = "@(_BiglandsEngineDependencyToCopy)"
      DestinationFiles = "@(_BiglandsEngineDependencyToCopy->'%(Destination)')"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
      UseHardlinksIfPossible="$(CreateHardLinksForAdditionalFilesIfPossible)">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

    <!-- Write file containing list of dependent files (or delete it if nothing) -->
    <WriteLinesToFile Condition="'@(_BiglandsEngineDependencyToCopy)' != ''" File="$(OutputPath)$(TargetName).ssdeps" Lines="@(_BiglandsEngineDependencyToCopy->'%(Type);%(TargetPath);%(RelativePath)')" Overwrite="true"/>
    <Delete Condition="'@(_BiglandsEngineDependencyToCopy)' == ''" Files="$(OutputPath)$(TargetName).ssdeps"/>
  </Target>

  <!-- Build -->
  <Target Name="_BiglandsEngineGenerateDependencies" Condition="'$(TargetFramework)' != '' Or '$(BiglandsEngineProjectType)' == 'Cpp'" DependsOnTargets="_BiglandsEngineGenerateDependenciesCore" AfterTargets="CopyFilesToOutputDirectory"/>
  <!-- Packaging -->
  <Target Name="_BiglandsEngineRegisterDependenciesOutputs" Condition="'$(TargetFramework)' != ''" DependsOnTargets="_BiglandsEngineGenerateDependenciesCore">
    <ItemGroup Condition="'@(_BiglandsEngineDependencyToCopy)' != ''">
      <BuildOutputInPackage Include="$(OutputPath)$(AssemblyName).ssdeps" />
    </ItemGroup>
  </Target>
  <Target Name="_BiglandsEngineRegisterPackageFiles" Condition="'$(TargetFramework)' != ''" DependsOnTargets="_BiglandsEngineGenerateDependenciesCore">
    <ItemGroup Condition="'@(_BiglandsEngineDependencyToCopy)' != ''">
      <!-- Native dependencies go to the runtimes/RID/native folder -->
      <TfmSpecificPackageFile Include="@(_BiglandsEngineDependencyToCopy)" 
                              Condition=" '%(_BiglandsEngineDependencyToCopy.Type)' == 'NativeLib' "
                              PackagePath="%(_BiglandsEngineDependencyToCopy.TargetPath)" />
      
      <!-- Content goes to contentFiles/any/any (language/tfm) with CopyToOutput=true and BuildAction=None -->
      <TfmSpecificPackageFile Include="@(_BiglandsEngineDependencyToCopy)" 
                              Condition=" '%(_BiglandsEngineDependencyToCopy.Type)' == 'Content' " 
                              PackagePath="contentFiles/any/any/%(_BiglandsEngineDependencyToCopy.TargetPath)"
                              PackageCopyToOutput="true"
                              BuildAction="None" />
    </ItemGroup>
  </Target>
</Project>
